diff -Naur weston-1.11.0.orig/shared/xalloc.h weston-1.11.0/shared/xalloc.h
--- weston-1.11.0.orig/shared/xalloc.h	2016-06-21 10:44:19.589264446 -0700
+++ weston-1.11.0/shared/xalloc.h	2016-06-21 10:44:32.790394210 -0700
@@ -30,6 +30,7 @@
 extern "C" {
 #endif
 
+#include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
 
diff -Naur weston-1.11.0.orig/src/weston-launch.c weston-1.11.0/src/weston-launch.c
--- weston-1.11.0.orig/src/weston-launch.c	2016-06-21 10:44:19.613264682 -0700
+++ weston-1.11.0/src/weston-launch.c	2016-06-21 10:54:33.890366803 -0700
@@ -33,7 +33,7 @@
 #include <poll.h>
 #include <errno.h>
 
-#include <error.h>
+#include <err.h>
 #include <getopt.h>
 
 #include <sys/types.h>
@@ -225,11 +225,15 @@
 static int
 setup_launcher_socket(struct weston_launch *wl)
 {
-	if (socketpair(AF_LOCAL, SOCK_SEQPACKET, 0, wl->sock) < 0)
-		error(1, errno, "socketpair failed");
+	if (socketpair(AF_LOCAL, SOCK_SEQPACKET, 0, wl->sock) < 0) {
+		err(errno, "socketpair failed");
+		exit(1);
+	}
 
-	if (fcntl(wl->sock[0], F_SETFD, FD_CLOEXEC) < 0)
-		error(1, errno, "fcntl failed");
+	if (fcntl(wl->sock[0], F_SETFD, FD_CLOEXEC) < 0) {
+		err(errno, "fcntl failed");
+		exit(1);
+	}
 
 	return 0;
 }
@@ -464,7 +468,7 @@
 	int pid, status, ret;
 
 	if (read(wl->signalfd, &sig, sizeof sig) != sizeof sig) {
-		error(0, errno, "reading signalfd failed");
+		err(errno, "reading signalfd failed");
 		return -1;
 	}
 
@@ -530,49 +534,69 @@
 		int tty0 = open("/dev/tty0", O_WRONLY | O_CLOEXEC);
 		char filename[16];
 
-		if (tty0 < 0)
-			error(1, errno, "could not open tty0");
+		if (tty0 < 0) {
+			err(errno, "could not open tty0");
+			exit(1);
+		}
 
-		if (ioctl(tty0, VT_OPENQRY, &wl->ttynr) < 0 || wl->ttynr == -1)
-			error(1, errno, "failed to find non-opened console");
+		if (ioctl(tty0, VT_OPENQRY, &wl->ttynr) < 0 || wl->ttynr == -1) {
+			err(errno, "failed to find non-opened console");
+			exit(1);
+		}
 
 		snprintf(filename, sizeof filename, "/dev/tty%d", wl->ttynr);
 		wl->tty = open(filename, O_RDWR | O_NOCTTY);
 		close(tty0);
 	}
 
-	if (wl->tty < 0)
-		error(1, errno, "failed to open tty");
+	if (wl->tty < 0) {
+		err(errno, "failed to open tty");
+		exit(1);
+	}
 
 	if (fstat(wl->tty, &buf) == -1 ||
-	    major(buf.st_rdev) != TTY_MAJOR || minor(buf.st_rdev) == 0)
-		error(1, 0, "weston-launch must be run from a virtual terminal");
+	    major(buf.st_rdev) != TTY_MAJOR || minor(buf.st_rdev) == 0) {
+		err(0, "weston-launch must be run from a virtual terminal");
+		exit(1);
+	}
 
 	if (tty) {
-		if (fstat(wl->tty, &buf) < 0)
-			error(1, errno, "stat %s failed", tty);
+		if (fstat(wl->tty, &buf) < 0) {
+			err(errno, "stat %s failed", tty);
+			exit(1);
+		}
 
-		if (major(buf.st_rdev) != TTY_MAJOR)
-			error(1, 0, "invalid tty device: %s", tty);
+		if (major(buf.st_rdev) != TTY_MAJOR) {
+			err(0, "invalid tty device: %s", tty);
+			exit(1);
+		}
 
 		wl->ttynr = minor(buf.st_rdev);
 	}
 
-	if (ioctl(wl->tty, KDGKBMODE, &wl->kb_mode))
-		error(1, errno, "failed to get current keyboard mode: %m\n");
+	if (ioctl(wl->tty, KDGKBMODE, &wl->kb_mode)) {
+		err(errno, "failed to get current keyboard mode: %m\n");
+		exit(1);
+	}
 
 	if (ioctl(wl->tty, KDSKBMUTE, 1) &&
-	    ioctl(wl->tty, KDSKBMODE, K_OFF))
-		error(1, errno, "failed to set K_OFF keyboard mode: %m\n");
+	    ioctl(wl->tty, KDSKBMODE, K_OFF)) {
+		err(errno, "failed to set K_OFF keyboard mode: %m\n");
+		exit(1);
+	}
 
-	if (ioctl(wl->tty, KDSETMODE, KD_GRAPHICS))
-		error(1, errno, "failed to set KD_GRAPHICS mode on tty: %m\n");
+	if (ioctl(wl->tty, KDSETMODE, KD_GRAPHICS)) {
+		err(errno, "failed to set KD_GRAPHICS mode on tty: %m\n");
+		exit(1);
+	}
 
 	mode.mode = VT_PROCESS;
 	mode.relsig = SIGUSR1;
 	mode.acqsig = SIGUSR2;
-	if (ioctl(wl->tty, VT_SETMODE, &mode) < 0)
-		error(1, errno, "failed to take control of vt handling\n");
+	if (ioctl(wl->tty, VT_SETMODE, &mode) < 0) {
+		err(errno, "failed to take control of vt handling\n");
+		exit(1);
+	}
 
 	return 0;
 }
@@ -585,10 +609,14 @@
 	int i;
 
 	if (wl->tty != STDIN_FILENO) {
-		if (setsid() < 0)
-			error(1, errno, "setsid failed");
-		if (ioctl(wl->tty, TIOCSCTTY, 0) < 0)
-			error(1, errno, "TIOCSCTTY failed - tty is in use");
+		if (setsid() < 0) {
+			err(errno, "setsid failed");
+			exit(1);
+		}
+		if (ioctl(wl->tty, TIOCSCTTY, 0) < 0) {
+			err(errno, "TIOCSCTTY failed - tty is in use");
+			exit(1);
+		}
 	}
 
 	term = getenv("TERM");
@@ -604,7 +632,7 @@
 	if (env) {
 		for (i = 0; env[i]; ++i) {
 			if (putenv(env[i]) != 0)
-				error(0, 0, "putenv %s failed", env[i]);
+				err(0, "putenv %s failed", env[i]);
 		}
 		free(env);
 	}
@@ -617,8 +645,10 @@
 #ifdef HAVE_INITGROUPS
 	    initgroups(wl->pw->pw_name, wl->pw->pw_gid) < 0 ||
 #endif
-	    setuid(wl->pw->pw_uid) < 0)
-		error(1, errno, "dropping privileges failed");
+	    setuid(wl->pw->pw_uid) < 0) {
+		err(errno, "dropping privileges failed");
+		exit(1);
+	}
 }
 
 static void
@@ -658,7 +688,8 @@
 	child_argv[5 + i] = NULL;
 
 	execv(child_argv[0], child_argv);
-	error(1, errno, "exec failed");
+	err(errno, "exec failed");
+	exit(1);
 }
 
 static void
@@ -691,8 +722,10 @@
 		switch (c) {
 		case 'u':
 			wl.new_user = optarg;
-			if (getuid() != 0)
-				error(1, 0, "Permission denied. -u allowed for root only");
+			if (getuid() != 0) {
+				err(0, "Permission denied. -u allowed for root only");
+				exit(1);
+			}
 			break;
 		case 't':
 			tty = optarg;
@@ -706,24 +739,30 @@
 		}
 	}
 
-	if ((argc - optind) > (MAX_ARGV_SIZE - 6))
-		error(1, E2BIG, "Too many arguments to pass to weston");
+	if ((argc - optind) > (MAX_ARGV_SIZE - 6)) {
+		err(E2BIG, "Too many arguments to pass to weston");
+		exit(1);
+	}
 
 	if (wl.new_user)
 		wl.pw = getpwnam(wl.new_user);
 	else
 		wl.pw = getpwuid(getuid());
-	if (wl.pw == NULL)
-		error(1, errno, "failed to get username");
+	if (wl.pw == NULL) {
+		err(errno, "failed to get username");
+		exit(1);
+	}
 
-	if (!weston_launch_allowed(&wl))
-		error(1, 0, "Permission denied. You should either:\n"
+	if (!weston_launch_allowed(&wl)) {
+		err(0, "Permission denied. You should either:\n"
 #ifdef HAVE_SYSTEMD_LOGIN
 		      " - run from an active and local (systemd) session.\n"
 #else
 		      " - enable systemd session support for weston-launch.\n"
 #endif
 		      " - or add yourself to the 'weston-launch' group.");
+		exit(1);
+	}
 
 	if (setup_tty(&wl, tty) < 0)
 		exit(EXIT_FAILURE);
@@ -738,8 +777,10 @@
 		exit(EXIT_FAILURE);
 
 	wl.child = fork();
-	if (wl.child == -1)
-		error(EXIT_FAILURE, errno, "fork failed");
+	if (wl.child == -1) {
+		err(errno, "fork failed");
+		exit(EXIT_FAILURE);
+	}
 
 	if (wl.child == 0)
 		launch_compositor(&wl, argc - optind, argv + optind);
@@ -759,7 +800,7 @@
 
 		n = poll(fds, 2, -1);
 		if (n < 0)
-			error(0, errno, "poll failed");
+			err(errno, "poll failed");
 		if (fds[0].revents & POLLIN)
 			handle_socket_msg(&wl);
 		if (fds[1].revents)
