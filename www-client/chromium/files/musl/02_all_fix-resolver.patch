diff -Naur chromium-54.0.2840.34.orig/net/dns/dns_config_service_posix.cc chromium-54.0.2840.34/net/dns/dns_config_service_posix.cc
--- chromium-54.0.2840.34.orig/net/dns/dns_config_service_posix.cc	2016-10-07 17:29:40.802258351 -0700
+++ chromium-54.0.2840.34/net/dns/dns_config_service_posix.cc	2016-10-07 17:31:25.046452894 -0700
@@ -25,6 +25,10 @@
 #include "net/dns/notify_watcher_mac.h"
 #include "net/dns/serial_worker.h"
 
+#if defined(OS_LINUX) && !defined(__GLIBC__)
+#include "net/dns/resolv_compat.h"
+#endif
+
 #if defined(OS_MACOSX) && !defined(OS_IOS)
 #include "net/dns/dns_config_watcher_mac.h"
 #endif
diff -Naur chromium-54.0.2840.34.orig/net/dns/dns_reloader.cc chromium-54.0.2840.34/net/dns/dns_reloader.cc
--- chromium-54.0.2840.34.orig/net/dns/dns_reloader.cc	2016-10-07 17:29:40.786258168 -0700
+++ chromium-54.0.2840.34/net/dns/dns_reloader.cc	2016-10-07 17:31:49.286730666 -0700
@@ -9,6 +9,10 @@
 
 #include <resolv.h>
 
+#if defined(OS_LINUX) && !defined(__GLIBC__)
+#include "net/dns/resolv_compat.h"
+#endif
+
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/macros.h"
diff -Naur chromium-54.0.2840.34.orig/net/dns/resolv_compat.h chromium-54.0.2840.34/net/dns/resolv_compat.h
--- chromium-54.0.2840.34.orig/net/dns/resolv_compat.h	1969-12-31 16:00:00.000000000 -0800
+++ chromium-54.0.2840.34/net/dns/resolv_compat.h	2016-10-07 17:30:21.641726334 -0700
@@ -0,0 +1,29 @@
+#if !defined(__GLIBC__)
+/***************************************************************************
+ * resolv_compat.h
+ *
+ * Mimick GLIBC's res_ninit() and res_nclose() for musl libc
+ * Note: res_init() is actually deprecated according to
+ * http://docs.oracle.com/cd/E36784_01/html/E36875/res-nclose-3resolv.html
+ **************************************************************************/
+#include <string.h>
+
+static inline int res_ninit(res_state statp)
+{
+	int rc = res_init();
+	if (statp != &_res) {
+		memcpy(statp, &_res, sizeof(*statp));
+	}
+	return rc;
+}
+
+static inline int res_nclose(res_state statp)
+{
+	if (!statp)
+		return -1;
+	if (statp != &_res) {
+		memset(statp, 0, sizeof(*statp));
+	}
+	return 0;
+}
+#endif
